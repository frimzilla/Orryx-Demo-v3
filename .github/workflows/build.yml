name: EAS Build and QR Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Validate package.json
        run: |
          node -e "const fs=require('fs');try{JSON.parse(fs.readFileSync('package.json','utf8'));console.log('package.json OK ‚úÖ')}catch(e){console.error('‚ùå Invalid package.json:',e.message);process.exit(1)}"

      # ‚îÄ‚îÄ 20-bar progress install (no tput; TERM-safe) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      - name: Install dependencies (20-bar progress)
        shell: bash
        run: |
          set -euo pipefail

          # 1) Estimate work using npm dry-run; fallback to lockfile; final fallback static
          estimate() {
            # npm ci --dry-run JSON (fast, accurate if lockfile exists)
            local est
            est=$(npm ci --dry-run --json 2>/dev/null | node -e "let s='';process.stdin.on('data',c=>s+=c).on('end',()=>{try{const j=JSON.parse(s);const a=(j.added||0)+(j.changed||0)+(j.removed||0);console.log(a||0)}catch{console.log(0)}})") || est=0
            if [ "$est" -gt 0 ]; then echo "$est"; return; fi

            # fallback: count dependencies from package-lock.json
            if [ -f package-lock.json ]; then
              est=$(node -e "try{const j=require('./package-lock.json');const d=j.packages?Object.keys(j.packages).length:(j.dependencies?Object.keys(j.dependencies).length:0);console.log(d||0)}catch{console.log(0)}") || est=0
              if [ "$est" -gt 0 ]; then echo "$est"; return; fi
            fi

            # last resort
            echo 400
          }

          TOTAL=$(estimate)
          [ "$TOTAL" -le 0 ] && TOTAL=400

          # 2) Start the real install quietly in the background
          ( npm install --silent --no-audit --no-fund ) & pid=$!

          # helper: count installed dirs quickly (top-level + scoped children)
          count_installed() {
            local top scoped
            top=$(find node_modules -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l | tr -d ' ')
            scoped=$(find node_modules/@* -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l | tr -d ' ' || true)
            echo $(( top + scoped ))
          }

          MAX=20
          echo "Installing dependencies‚Ä¶"
          while kill -0 "$pid" >/dev/null 2>&1; do
            INST=$(count_installed)
            [ "$INST" -lt 1 ] && INST=1
            # scale and clamp to 20
            FILLED=$(( INST * MAX / TOTAL ))
            [ "$FILLED" -gt "$MAX" ] && FILLED=$MAX
            EMPTY=$(( MAX - FILLED ))

            BAR=""
            for _ in $(seq 1 $FILLED); do BAR="${BAR}|"; done
            for _ in $(seq 1 $EMPTY);  do BAR="${BAR} "; done
            PCT=$(( INST * 100 / TOTAL ))
            [ "$PCT" -gt 100 ] && PCT=100
            printf "\r[%s] %3d%%" "$BAR" "$PCT"
            sleep 0.25
          done

          wait "$pid"
          code=$?
          printf "\r[%s] 100%%\n" "$(printf '%0.s|' $(seq 1 $MAX))"
          if [ $code -ne 0 ]; then
            echo "‚ùå npm install failed"
            exit $code
          fi
          echo "‚úÖ Dependencies installed"

      - name: Install EAS CLI
        run: npm install -g eas-cli

      - name: Verify EXPO_TOKEN secret
        run: |
          if [ -z "${{ secrets.EXPO_TOKEN }}" ]; then
            echo "::error ::‚ùå EXPO_TOKEN secret is missing. Add it under Settings ‚Üí Secrets ‚Üí Actions."
            exit 1
          else
            echo "‚úÖ EXPO_TOKEN detected. Proceeding with build."
          fi

      - name: Run EAS Build (Android, profile=internal)
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          eas --version
          eas build -p android --profile internal --non-interactive --json | tee eas-build.json

      - name: Extract EAS build URL (primary)
        run: |
          node <<'NODE'
          const fs = require('fs');
          let url='', status='', err='';
          try {
            const txt = fs.readFileSync('eas-build.json','utf8').trim();
            if (txt) {
              const j = JSON.parse(txt);
              const b = Array.isArray(j.builds) ? j.builds[0] : j;
              status = b?.status || j?.status || '';
              url = b?.webUrl || b?.buildUrl || b?.logsUrl || '';
              err = b?.error?.message || j?.error?.message || '';
            }
          } catch(e) {
            console.error('‚ùå Parse error:', e.message);
          }
          if (status && status !== 'finished') console.log('EAS status:', status);
          if (!url && err) console.log('EAS error:', err);
          console.log('EAS build page:', url || '(not found)');
          fs.writeFileSync('eas-build-url.txt', (url||'').trim());
          fs.writeFileSync('README.txt', url ? `Open this URL for the QR code:\n${url}\n` : 'Build failed or URL not found.\n');
          NODE

      # NOTE: no heredoc inside 'if' ‚Äî run unconditionally and decide inside bash
      - name: Recover URL from latest finished build (fallback)
        if: always()
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          if [ ! -s eas-build-url.txt ]; then
            echo "No URL from primary JSON; trying eas build:list fallback‚Ä¶"
            eas build:list --platform android --status finished --limit 1 --json > eas-fallback.json || true
            node <<'NODE'
            const fs = require('fs');
            try {
              const txt = fs.readFileSync('eas-fallback.json','utf8');
              const j = JSON.parse(txt);
              const b = Array.isArray(j) ? j[0] : j;
              const url = (b && (b.webUrl || b.buildUrl || b.logsUrl)) || '';
              if (url) {
                console.log('Recovered EAS build page:', url);
                fs.writeFileSync('eas-build-url.txt', url);
                fs.writeFileSync('README.txt', `Open this URL for the QR code:\n${url}\n`);
              } else {
                console.log('No finished builds found in fallback.');
              }
            } catch(e) {
              console.log('Fallback parse error:', e.message);
            }
            NODE
          fi

      - name: Install QR tool
        run: npm install -g qrcode-terminal

      - name: Print QR in logs
        if: always()
        run: |
          if [ -s eas-build-url.txt ]; then
            URL="$(cat eas-build-url.txt)"
            echo "üîó $URL"
            qrcode-terminal "$URL"
          else
            echo "‚ö†Ô∏è No EAS URL found; skipping QR."
            echo "Tip: Check 'eas-build.json' and (if present) 'eas-fallback.json' artifacts."
          fi

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: eas-android-internal-build
          path: |
            eas-build.json
            eas-fallback.json
            eas-build-url.txt
            README.txt
